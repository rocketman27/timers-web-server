/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.timers.api;

import com.example.timers.model.CreateTemplateRequest;
import com.example.timers.model.TimerTemplate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Templates", description = "the Templates API")
public interface TemplatesApi {

    default TemplatesApiDelegate getDelegate() {
        return new TemplatesApiDelegate() {};
    }

    /**
     * POST /api/templates : Create template and materialize instances
     *
     * @param createTemplateRequest  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createTemplate",
        summary = "Create template and materialize instances",
        tags = { "Templates" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimerTemplate.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/templates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TimerTemplate> createTemplate(
        @Parameter(name = "CreateTemplateRequest", description = "", required = true) @Valid @RequestBody CreateTemplateRequest createTemplateRequest
    ) {
        return getDelegate().createTemplate(createTemplateRequest);
    }


    /**
     * GET /api/templates/{id} : Get template by id
     *
     * @param id  (required)
     * @return Template (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getTemplateById",
        summary = "Get template by id",
        tags = { "Templates" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Template", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimerTemplate.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/templates/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TimerTemplate> getTemplateById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return getDelegate().getTemplateById(id);
    }


    /**
     * GET /api/templates : List templates
     *
     * @return Templates (status code 200)
     */
    @Operation(
        operationId = "listTemplates",
        summary = "List templates",
        tags = { "Templates" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Templates", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimerTemplate.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/templates",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TimerTemplate>> listTemplates(
        
    ) {
        return getDelegate().listTemplates();
    }


    /**
     * PUT /api/templates/{id} : Update template and re-materialize instances
     *
     * @param id  (required)
     * @param createTemplateRequest  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "updateTemplate",
        summary = "Update template and re-materialize instances",
        tags = { "Templates" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimerTemplate.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/templates/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TimerTemplate> updateTemplate(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "CreateTemplateRequest", description = "", required = true) @Valid @RequestBody CreateTemplateRequest createTemplateRequest
    ) {
        return getDelegate().updateTemplate(id, createTemplateRequest);
    }

}
