/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.timers.api;

import com.example.timers.model.BatchIdsRequest;
import com.example.timers.model.TimerInstance;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Instances", description = "the Instances API")
public interface InstancesApi {

    default InstancesApiDelegate getDelegate() {
        return new InstancesApiDelegate() {};
    }

    /**
     * GET /api/instances : List instances
     *
     * @param templateId  (optional)
     * @param country  (optional)
     * @param region  (optional)
     * @param subregion  (optional)
     * @param flowType  (optional)
     * @param clientId  (optional)
     * @param productType  (optional)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Instances (status code 200)
     */
    @Operation(
        operationId = "listInstances",
        summary = "List instances",
        tags = { "Instances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Instances", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimerInstance.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/instances",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TimerInstance>> listInstances(
        @Parameter(name = "templateId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "templateId", required = false) String templateId,
        @Parameter(name = "country", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "country", required = false) String country,
        @Parameter(name = "region", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "region", required = false) String region,
        @Parameter(name = "subregion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subregion", required = false) String subregion,
        @Parameter(name = "flowType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "flowType", required = false) String flowType,
        @Parameter(name = "clientId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clientId", required = false) String clientId,
        @Parameter(name = "productType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "productType", required = false) String productType,
        @Min(0) @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(200) @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    ) {
        return getDelegate().listInstances(templateId, country, region, subregion, flowType, clientId, productType, page, size);
    }


    /**
     * POST /api/instances/_reset : Reset instances by ids (set completed/failed back to active)
     *
     * @param batchIdsRequest  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "resetInstances",
        summary = "Reset instances by ids (set completed/failed back to active)",
        tags = { "Instances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimerInstance.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/instances/_reset",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<TimerInstance>> resetInstances(
        @Parameter(name = "BatchIdsRequest", description = "", required = true) @Valid @RequestBody BatchIdsRequest batchIdsRequest
    ) {
        return getDelegate().resetInstances(batchIdsRequest);
    }


    /**
     * POST /api/instances/_resume : Resume instances by ids
     *
     * @param batchIdsRequest  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "resumeInstances",
        summary = "Resume instances by ids",
        tags = { "Instances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimerInstance.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/instances/_resume",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<TimerInstance>> resumeInstances(
        @Parameter(name = "BatchIdsRequest", description = "", required = true) @Valid @RequestBody BatchIdsRequest batchIdsRequest
    ) {
        return getDelegate().resumeInstances(batchIdsRequest);
    }


    /**
     * POST /api/instances/_suspend : Suspend instances by ids
     *
     * @param batchIdsRequest  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "suspendInstances",
        summary = "Suspend instances by ids",
        tags = { "Instances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimerInstance.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/instances/_suspend",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<TimerInstance>> suspendInstances(
        @Parameter(name = "BatchIdsRequest", description = "", required = true) @Valid @RequestBody BatchIdsRequest batchIdsRequest
    ) {
        return getDelegate().suspendInstances(batchIdsRequest);
    }


    /**
     * POST /api/instances/_trigger : Trigger instances by ids
     *
     * @param batchIdsRequest  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "triggerInstances",
        summary = "Trigger instances by ids",
        tags = { "Instances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimerInstance.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/instances/_trigger",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<TimerInstance>> triggerInstances(
        @Parameter(name = "BatchIdsRequest", description = "", required = true) @Valid @RequestBody BatchIdsRequest batchIdsRequest
    ) {
        return getDelegate().triggerInstances(batchIdsRequest);
    }

}
