openapi: 3.0.3
info:
  title: Backend API
  description: Sample API for timers management
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /api/timers:
    get:
      tags: [Timers]
      summary: List timers
      operationId: listTimers
      responses:
        '200':
          description: Timers
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Timer' }
              examples:
                sampleList:
                  summary: Example list of timers
                  value:
                    - id: "a1b2c3"
                      name: "EOD FX Batch"
                      description: "End-of-day FX processing"
                      cronExpression: "0 0 18 * * ?"
                      zoneId: "Europe/London"
                      triggerTime: null
                      suspended: false
                      countries: ["GB", "IE"]
                      regions: ["EMEA"]
                      excludedCountries: []
                      excludedRegions: []
                      flowTypes: ["FX"]
                      clientIds: ["C1", "C2"]
                      productTypes: ["CASH"]
    post:
      tags: [Timers]
      summary: Create timer
      operationId: createTimer
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTimerRequest' }
            examples:
              createDailyTimer:
                summary: Create a daily timer
                value:
                  name: "Client Statement Delivery"
                  description: "Send daily statements"
                  zoneId: "UTC"
                  triggerTime: "10:15"
                  suspended: false
                  countries: ["US", "CA"]
                  regions: ["Americas"]
                  excludedCountries: ["MX"]
                  excludedRegions: []
                  flowTypes: ["REPORT"]
                  clientIds: ["CLIENT_A"]
                  productTypes: ["CASH"]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Timer' }
              examples:
                created:
                  summary: Created timer
                  value:
                    id: "f7e8d9"
                    name: "Client Statement Delivery"
                    description: "Send daily statements"
                    cronExpression: "0 15 10 * * ?"
                    zoneId: "UTC"
                    triggerTime: "10:15"
                    suspended: false
                    countries: ["US", "CA"]
                    regions: ["Americas"]
                    excludedCountries: ["MX"]
                    excludedRegions: []
                    flowTypes: ["REPORT"]
                    clientIds: ["CLIENT_A"]
                    productTypes: ["CASH"]
  /api/timers/{id}:
    get:
      tags: [Timers]
      summary: Get timer by id
      operationId: getTimer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Timer
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Timer' }
              examples:
                sample:
                  value:
                    id: "a1b2c3"
                    name: "EOD FX Batch"
                    description: "End-of-day FX processing"
                    cronExpression: "0 0 18 * * ?"
                    zoneId: "Europe/London"
                    triggerTime: null
                    suspended: false
                    countries: ["GB", "IE"]
                    regions: ["EMEA"]
                    excludedCountries: []
                    excludedRegions: []
                    flowTypes: ["FX"]
                    clientIds: ["C1", "C2"]
                    productTypes: ["CASH"]
        '404': { description: Not Found }
    put:
      tags: [Timers]
      summary: Update timer
      operationId: updateTimer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
              schema: { $ref: '#/components/schemas/CreateTimerRequest' }
              examples:
                updateSuspend:
                  summary: Suspend a timer
                  value:
                    name: "EOD FX Batch"
                    description: "End-of-day FX processing"
                    zoneId: "Europe/London"
                    cronExpression: "0 0 18 * * ?"
                    triggerTime: null
                    suspended: true
                    countries: ["GB", "IE"]
                    regions: ["EMEA"]
                    excludedCountries: []
                    excludedRegions: []
                    flowTypes: ["FX"]
                    clientIds: ["C1", "C2"]
                    productTypes: ["CASH"]
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Timer' }
  
  /api/executions:
    get:
      tags: [Executions]
      summary: List executions
      operationId: listExecutions
      parameters:
        - in: query
          name: instanceId
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
      responses:
        '200':
          description: Executions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TimerExecution' }
              examples:
                sampleExecutions:
                  value:
                    - id: "e1"
                      instanceId: null
                      timerId: "a1b2c3"
                      timerName: "EOD FX Batch"
                      scheduledFor: "2025-10-10T18:00:00Z"
                      startedAt: "2025-10-10T18:00:00Z"
                      finishedAt: "2025-10-10T18:00:02Z"
                      outcome: "SUCCESS"
                      errorMessage: null
                      triggerType: "SCHEDULED"
components:
  schemas:
    Timer:
      type: object
      required: [id, name, zoneId]
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        cronExpression:
          type: string
          nullable: true
          description: "Optional. If omitted, backend derives a daily cron from triggerTime."
        zoneId: { type: string, description: IANA time zone id, example: Europe/London }
        triggerTime:
          type: string
          description: "Daily trigger time HH:mm"
          example: 10:15
        suspended: { type: boolean, default: false }
        countries: { type: array, items: { type: string } }
        regions: { type: array, items: { type: string } }
        subregions: { type: array, items: { type: string } }
        excludedCountries: { type: array, items: { type: string } }
        excludedRegions: { type: array, items: { type: string } }
        flowTypes: { type: array, items: { type: string } }
        clientIds: { type: array, items: { type: string } }
        productTypes: { type: array, items: { type: string, enum: [CASH, SWAP] } }
    CreateTimerRequest:
      type: object
      required: [name, zoneId]
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        cronExpression:
          type: string
          nullable: true
        zoneId: { type: string }
        triggerTime:
          type: string
          description: "Daily trigger time HH:mm"
          example: 10:15
        suspended: { type: boolean, default: false }
        countries: { type: array, items: { type: string } }
        regions: { type: array, items: { type: string } }
        subregions: { type: array, items: { type: string } }
        excludedCountries: { type: array, items: { type: string } }
        excludedRegions: { type: array, items: { type: string } }
        flowTypes: { type: array, items: { type: string } }
        clientIds: { type: array, items: { type: string } }
        productTypes: { type: array, items: { type: string, enum: [CASH, SWAP] } }
    TimerExecution:
      type: object
      required: [id, instanceId]
      properties:
        id: { type: string }
        instanceId: { type: string }
        timerId: { type: string, nullable: true }
        timerName: { type: string, nullable: true }
        scheduledFor: { type: string, format: date-time, nullable: true }
        startedAt: { type: string, format: date-time, nullable: true }
        finishedAt: { type: string, format: date-time, nullable: true }
        outcome:
          type: string
          enum: [SUCCESS, FAILED, SKIPPED]
          nullable: true
        errorMessage: { type: string, nullable: true }
        triggerType:
          type: string
          enum: [SCHEDULED, MANUAL]
          nullable: true
    BatchIdsRequest:
      type: object
      required: [ids]
      properties:
        ids:
          type: array
          minItems: 1
          items:
            type: string
    ApiError:
      type: object
      required: [message]
      properties:
        message:
          type: string
        details:
          type: string
          nullable: true

    

