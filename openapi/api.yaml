openapi: 3.0.3
info:
  title: Backend API
  description: Sample API for timers management
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /api/timers:
    get:
      tags: [Timers]
      summary: List timers
      operationId: listTimers
      responses:
        '200':
          description: Timers
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Timer' }
    post:
      tags: [Timers]
      summary: Create timer
      operationId: createTimer
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTimerRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Timer' }
  /api/timers/{id}:
    get:
      tags: [Timers]
      summary: Get timer by id
      operationId: getTimer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Timer
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Timer' }
        '404': { description: Not Found }
    put:
      tags: [Timers]
      summary: Update timer
      operationId: updateTimer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTimerRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Timer' }
  
  /api/executions:
    get:
      tags: [Executions]
      summary: List executions
      operationId: listExecutions
      parameters:
        - in: query
          name: instanceId
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
      responses:
        '200':
          description: Executions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TimerExecution' }
components:
  schemas:
    Timer:
      type: object
      required: [id, name, zoneId]
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        cronExpression:
          type: string
          nullable: true
          description: "Optional. If omitted, backend derives a daily cron from triggerTime."
        zoneId: { type: string, description: IANA time zone id, example: Europe/London }
        triggerTime:
          type: string
          description: "Daily trigger time HH:mm"
          example: 10:15
        suspended: { type: boolean, default: false }
        countries: { type: array, items: { type: string } }
        regions: { type: array, items: { type: string } }
        subregions: { type: array, items: { type: string } }
        excludedCountries: { type: array, items: { type: string } }
        excludedRegions: { type: array, items: { type: string } }
        flowTypes: { type: array, items: { type: string } }
        clientIds: { type: array, items: { type: string } }
        productTypes: { type: array, items: { type: string, enum: [CASH, SWAP] } }
    CreateTimerRequest:
      type: object
      required: [name, zoneId]
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        cronExpression:
          type: string
          nullable: true
        zoneId: { type: string }
        triggerTime:
          type: string
          description: "Daily trigger time HH:mm"
          example: 10:15
        suspended: { type: boolean, default: false }
        countries: { type: array, items: { type: string } }
        regions: { type: array, items: { type: string } }
        subregions: { type: array, items: { type: string } }
        excludedCountries: { type: array, items: { type: string } }
        excludedRegions: { type: array, items: { type: string } }
        flowTypes: { type: array, items: { type: string } }
        clientIds: { type: array, items: { type: string } }
        productTypes: { type: array, items: { type: string, enum: [CASH, SWAP] } }
    TimerExecution:
      type: object
      required: [id, instanceId]
      properties:
        id: { type: string }
        instanceId: { type: string }
        timerId: { type: string, nullable: true }
        timerName: { type: string, nullable: true }
        scheduledFor: { type: string, format: date-time, nullable: true }
        startedAt: { type: string, format: date-time, nullable: true }
        finishedAt: { type: string, format: date-time, nullable: true }
        outcome:
          type: string
          enum: [SUCCESS, FAILED, SKIPPED]
          nullable: true
        errorMessage: { type: string, nullable: true }
        triggerType:
          type: string
          enum: [SCHEDULED, MANUAL]
          nullable: true
    BatchIdsRequest:
      type: object
      required: [ids]
      properties:
        ids:
          type: array
          minItems: 1
          items:
            type: string
    ApiError:
      type: object
      required: [message]
      properties:
        message:
          type: string
        details:
          type: string
          nullable: true

    

