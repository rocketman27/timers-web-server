plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.7.0'
    id 'jacoco'
}

group = 'com.bnpparibas.tr.timers'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.awaitility:awaitility:4.2.2'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
    finalizedBy tasks.named('jacocoTestReport')
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    dependsOn tasks.named('test')
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    // Exclude generated OpenAPI code and the Spring Boot main class from coverage metrics
    def jacocoExcludes = [
        'com/bnpparibas/tr/timer/api/**',
        'com/bnpparibas/tr/timer/invoker/**',
        'com/bnpparibas/tr/timer/model/**',
        'com/bnpparibas/tr/timer/TimersWebServer*',
        // exclude trivial domain POJOs/enums often not directly unit-testable
        'com/bnpparibas/tr/timer/domain/**'
    ]
    classDirectories.setFrom(files(classDirectories.files.collect { fileTree(dir: it, exclude: jacocoExcludes) }))
}

// Print a concise JaCoCo summary to the build log
tasks.register('printCoverageSummary') {
    dependsOn tasks.named('jacocoTestReport')
    doLast {
        def reportFile = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
        if (!reportFile.exists()) {
            logger.lifecycle("JaCoCo report not found: ${reportFile}")
            return
        }
        def txt = reportFile.getText('UTF-8')
        // Strip DOCTYPE to avoid parser security restrictions
        def sanitized = txt.replaceAll(/(?s)<!DOCTYPE.*?>/, '')
        def xml = new groovy.xml.XmlSlurper().parseText(sanitized)
        def rootCounters = xml.counter
        if (rootCounters && rootCounters.size() > 0) {
            def methodCounter = rootCounters.find { it.@type == 'METHOD' }
            def classCounter = rootCounters.find { it.@type == 'CLASS' }
            if (methodCounter && classCounter) {
                def mMissed = new BigInteger(methodCounter.@missed.text())
                def mCovered = new BigInteger(methodCounter.@covered.text())
                def cMissed = new BigInteger(classCounter.@missed.text())
                def cCovered = new BigInteger(classCounter.@covered.text())
                def mTotal = mMissed + mCovered
                def cTotal = cMissed + cCovered
                def mPct = mTotal == 0 ? 0 : (mCovered * 100.0 / mTotal)
                def cPct = cTotal == 0 ? 0 : (cCovered * 100.0 / cTotal)
                logger.lifecycle(String.format("JaCoCo summary: methods %.2f%% (%d/%d), classes %.2f%% (%d/%d)", mPct, mCovered, mTotal, cPct, cCovered, cTotal))
            } else {
                logger.lifecycle("JaCoCo summary: root counters not found in XML")
            }
        } else {
            logger.lifecycle("JaCoCo summary: counters not found in XML")
        }
    }
}

tasks.named('jacocoTestReport') {
    finalizedBy tasks.named('printCoverageSummary')
}

jacocoTestCoverageVerification {
    dependsOn tasks.named('test')
    // Keep exclusions consistent with the report task
    def jacocoExcludes = [
        'com/bnpparibas/tr/timer/api/**',
        'com/bnpparibas/tr/timer/invoker/**',
        'com/bnpparibas/tr/timer/model/**',
        'com/bnpparibas/tr/timer/TimersWebServer*',
        'com/bnpparibas/tr/timer/domain/**'
    ]
    classDirectories.setFrom(files(classDirectories.files.collect { fileTree(dir: it, exclude: jacocoExcludes) }))
    violationRules {
        // Methods coverage >= 79%
        rule {
            element = 'CLASS'
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.79
            }
        }
        // Classes coverage (classes with any coverage) >= 79%
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.79
            }
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('jacocoTestCoverageVerification')
}

// Export XML coverage to a stable, repo-root location for generic CI pipelines
tasks.register('exportCoverageForCi') {
    dependsOn tasks.named('jacocoTestReport')
    doLast {
        def targetDir = new File(rootDir, 'coverage')
        if (!targetDir.exists()) targetDir.mkdirs()
        copy {
            from "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
            into targetDir
            rename { String n -> 'jacoco-timers-web-server.xml' }
        }
        logger.lifecycle("Exported coverage XML to ${new File(targetDir, 'jacoco-timers-web-server.xml').absolutePath}")
    }
}

tasks.named('jacocoTestReport') {
    finalizedBy tasks.named('exportCoverageForCi')
}

sourceSets {
	main {
		java {
			srcDir "$buildDir/generated/src/main/java"
		}
	}
}

openApiGenerate {
	generatorName = "spring"
	inputSpec = "$projectDir/openapi/api.yaml"
	outputDir = "$buildDir/generated"
	apiPackage = "com.bnpparibas.tr.timer.api"
	modelPackage = "com.bnpparibas.tr.timer.model"
	invokerPackage = "com.bnpparibas.tr.timer.invoker"
    modelNameSuffix = "Dto"
    configOptions = [
		interfaceOnly: "false",
		delegatePattern: "true",
		useSpringBoot3: "true",
		dateLibrary: "java8",
		performBeanValidation: "true",
		useTags: "true",
		hideGenerationTimestamp: "true",
        serializableModel: "true",
        openApiNullable: "false"
	]
	globalProperties = [
		apis: "",
		models: "",
		supportingFiles: "ApiUtil.java"
	]
}

tasks.named('compileJava') {
	dependsOn tasks.named('openApiGenerate')
}

// Delete previous generated sources before generation to avoid stale files
tasks.named('openApiGenerate') {
	doFirst {
		delete "$buildDir/generated"
	}
}

tasks.named('clean') {
	doFirst {
		delete "$buildDir/generated"
	}
}
